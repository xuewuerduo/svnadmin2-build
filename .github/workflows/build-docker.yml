name: 检查远程发布并使用 Docker 镜像创建发布版本

on:
  schedule:
    # 每4小时运行一次
    - cron: '0 */4 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-release-and-create:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取所有历史记录以便检查现有标签

      - name: 从远程仓库获取最新发布版本
        id: get_remote_release
        run: |
          # 获取远程仓库的所有release列表
          response=$(curl -s https://api.github.com/repos/witersen/SvnAdminV2.0/releases)

          # 遍历release列表，找到第一个符合纯数字格式的release
          latest_release_tag=""
          latest_release_name=""
          latest_release_body=""
          latest_release_url=""

          echo "$response" | jq -c '.[]' | while read -r release; do
            tag_name=$(echo "$release" | jq -r '.tag_name')
            name=$(echo "$release" | jq -r '.name')

            # 检查版本标签是否符合纯数字格式（例如：v1.2.3 或 1.2.3）
            if [[ "$tag_name" =~ ^[vV]?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              latest_release_tag="$tag_name"
              latest_release_name="$name"
              latest_release_body=$(echo "$release" | jq -r '.body')
              latest_release_url=$(echo "$release" | jq -r '.html_url')
              break
            fi
          done

          # 如果没有找到符合纯数字格式的release，则跳过
          if [[ -z "$latest_release_tag" ]]; then
            echo "No release with pure numeric version format found, skipping"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "latest_release_tag=$latest_release_tag" >> $GITHUB_OUTPUT
          echo "latest_release_name=$latest_release_name" >> $GITHUB_OUTPUT
          echo "latest_release_body=$latest_release_body" >> $GITHUB_OUTPUT
          echo "latest_release_url=$latest_release_url" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT
      
      

      - name: 检查此仓库中是否已存在该发布版本
        if: steps.get_remote_release.outputs.skip == 'false'
        id: check_local_release
        run: |
          # 检查本地是否已有该标签
          if git rev-parse -q --verify "refs/tags/${{ steps.get_remote_release.outputs.latest_release_tag }}" >/dev/null; then
            echo "Release already exists in local repository"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release does not exist in local repository"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 创建新标签并发布（版本）
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        run: |
          # 配置git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 创建标签
          git tag ${{ steps.get_remote_release.outputs.latest_release_tag }}
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} ${{ steps.get_remote_release.outputs.latest_release_tag }}

      - name: 创建发布版本
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_remote_release.outputs.latest_release_tag }}
          release_name: ${{ steps.get_remote_release.outputs.latest_release_name }}
          body: |
            同步自 [witersen/SvnAdminV2.0](${{ steps.get_remote_release.outputs.latest_release_url }}) 的更新:
            
            ${{ steps.get_remote_release.outputs.latest_release_body }}
            
            ---
            
            此版本由自动化工作流同步创建。
          draft: false
          prerelease: false

      # 构建并推送Docker镜像
      - name: 设置 Docker Buildx
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: 登陆 DockerHub
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

     #- name: 登录 GitHub 容器仓库
     #  if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
     #  uses: docker/login-action@v3
     #  with:
     #    registry: ghcr.io
     #    username: ${{ github.actor }}
     #    password: ${{ secrets.GITHUB_TOKEN }}

      - name: 获取当前日期
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      # 构建并推送Build-Docker镜像
      - name: 构建并推送 Build-Docker 镜像
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./Build-Docker
          push: true
          tags: |
            xuewuerduo/svnadmin2:latest
            xuewuerduo/svnadmin2:${{ steps.get_remote_release.outputs.latest_release_tag }}
            xuewuerduo/svnadmin2:${{ steps.date.outputs.date }}
            ghcr.io/${{ github.repository_owner }}/svnadmin2:latest
            ghcr.io/${{ github.repository_owner }}/svnadmin2:${{ steps.get_remote_release.outputs.latest_release_tag }}
            ghcr.io/${{ github.repository_owner }}/svnadmin2:${{ steps.date.outputs.date }}

      # 构建并推送Build-Docker-kotel镜像
      - name: 构建并推送 Build-Docker-kotel 镜像
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./Build-Docker-kotel
          push: true
          tags: |
            xuewuerduo/svnadmin2-kotel:latest
            xuewuerduo/svnadmin2-kotel:${{ steps.get_remote_release.outputs.latest_release_tag }}
            xuewuerduo/svnadmin2-kotel:${{ steps.date.outputs.date }}
            ghcr.io/${{ github.repository_owner }}/svnadmin2-kotel:latest
            ghcr.io/${{ github.repository_owner }}/svnadmin2-kotel:${{ steps.get_remote_release.outputs.latest_release_tag }}
            ghcr.io/${{ github.repository_owner }}/svnadmin2-kotel:${{ steps.date.outputs.date }}
