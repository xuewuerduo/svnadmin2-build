name: 检查远程发布并使用 Docker 镜像创建发布版本

on:
  schedule:
    # 每4小时运行一次
    - cron: '0 */4 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-release-and-create:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取所有历史记录以便检查现有标签

      - name: 从远程仓库获取最新发布版本
        id: get_remote_release
        run: |
          # 获取远程仓库的所有release列表
          response=$(curl -s https://api.github.com/repos/witersen/SvnAdminV2.0/releases)
          
          # 调试信息：输出获取到的release信息
          echo "Remote releases count: $(echo "$response" | jq 'length')"
          echo "First few releases:"
          echo "$response" | jq -r '.[0:3] | .[] | "Tag: \(.tag_name), Name: \(.name)"' || echo "Failed to parse releases"

          # 遍历release列表，找到第一个符合纯数字格式的release
          latest_release_tag=""
          latest_release_name=""
          latest_release_body=""
          latest_release_url=""
          latest_release_id=""

          # 使用数组方式避免管道问题
          mapfile -t releases < <(echo "$response" | jq -c '.[]')
          
          for release_json in "${releases[@]}"; do
            tag_name=$(echo "$release_json" | jq -r '.tag_name')
            name=$(echo "$release_json" | jq -r '.name')
          
            echo "Checking tag: $tag_name"

            # 检查版本标签是否符合纯数字格式（例如：v1.2.3 或 1.2.3）
            if [[ "$tag_name" =~ ^[vV]?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              latest_release_tag="$tag_name"
              latest_release_name="$name"
              latest_release_body=$(echo "$release_json" | jq -r '.body' | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/[、，]/,/g')
              latest_release_url=$(echo "$release_json" | jq -r '.html_url')
              latest_release_id=$(echo "$release_json" | jq -r '.id')
              echo "Found matching release: $tag_name"
              break
            fi
          done

          # 如果没有找到符合纯数字格式的release，则跳过
          if [[ -z "$latest_release_tag" ]]; then
            echo "No release with pure numeric version format found, skipping"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 获取release的资源文件信息
          assets_response=$(curl -s "https://api.github.com/repos/witersen/SvnAdminV2.0/releases/$latest_release_id/assets")
          echo "Release assets count: $(echo "$assets_response" | jq 'length')"
          
          # 将资源文件信息转换为base64编码以避免格式问题
          assets_b64=$(echo "$assets_response" | base64 -w 0)
          
          # 保存资源文件信息到输出
          echo "assets_b64=$assets_b64" >> $GITHUB_OUTPUT

          # 对输出进行转义处理，防止特殊字符破坏格式
          echo "latest_release_tag=$latest_release_tag" >> $GITHUB_OUTPUT
          echo "latest_release_name=$latest_release_name" >> $GITHUB_OUTPUT
          echo "latest_release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$latest_release_body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "latest_release_url=$latest_release_url" >> $GITHUB_OUTPUT
          echo "latest_release_id=$latest_release_id" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT



      - name: 检查此仓库中是否已存在该发布版本
        if: steps.get_remote_release.outputs.skip == 'false'
        id: check_local_release
        run: |
          # 检查本地是否已有该标签
          if git rev-parse -q --verify "refs/tags/${{ steps.get_remote_release.outputs.latest_release_tag }}" >/dev/null; then
            echo "Release already exists in local repository"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release does not exist in local repository"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 下载远程仓库的Release资源文件
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        id: download_assets
        run: |
          # 创建临时目录存放下载的资源文件
          mkdir -p /tmp/release_assets
          cd /tmp/release_assets
          
          # 从步骤输出中读取并解码资源文件信息
          assets_json=$(echo "${{ steps.get_remote_release.outputs.assets_b64 }}" | base64 -d)
          
          # 遍历并下载所有资源文件
          echo "$assets_json" | jq -c '.[]' | while read -r asset; do
            asset_name=$(echo "$asset" | jq -r '.name')
            asset_url=$(echo "$asset" | jq -r '.browser_download_url')
          
            if [[ "$asset_name" != "null" && "$asset_url" != "null" ]]; then
              echo "Downloading asset: $asset_name"
              curl -L -o "$asset_name" "$asset_url" || echo "Failed to download $asset_name"
            fi
          done
          
          # 列出下载的文件
          echo "Downloaded assets:"
          ls -la
          
          # 设置标志表示已下载资源文件
          echo "downloaded=true" >> $GITHUB_OUTPUT

      - name: 创建新标签并发布（版本）
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        run: |
          # 配置git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 创建标签
          git tag ${{ steps.get_remote_release.outputs.latest_release_tag }}
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} ${{ steps.get_remote_release.outputs.latest_release_tag }}

      - name: 创建发布版本
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_remote_release.outputs.latest_release_tag }}
          release_name: ${{ steps.get_remote_release.outputs.latest_release_name }}
          body: |
            同步自 [witersen/SvnAdminV2.0](${{ steps.get_remote_release.outputs.latest_release_url }}) 的更新:
            
            ${{ steps.get_remote_release.outputs.latest_release_body }}
            
            ---
            
            此版本由自动化工作流同步创建。
          draft: false
          prerelease: false

      - name: 上传资源文件到新创建的Release
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false' && steps.download_assets.outputs.downloaded == 'true'
        run: |
          # 上传下载的资源文件到新创建的release
          cd /tmp/release_assets
          
          # 获取新创建的release的上传URL
          release_id=${{ steps.create_release.outputs.id }}
          
          # 遍历并上传所有资源文件
          for file in *; do
            if [[ -f "$file" ]]; then
              echo "Uploading asset: $file"
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=$(basename "$file")" \
                || echo "Failed to upload $file"
            fi
          done

      # 构建并推送Docker镜像
      - name: 设置 Docker Buildx
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: 登陆 DockerHub
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #- name: 登录 GitHub 容器仓库
      #  if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
      #  uses: docker/login-action@v3
      #  with:
      #    registry: ghcr.io
      #    username: ${{ github.actor }}
      #    password: ${{ secrets.GITHUB_TOKEN }}

      - name: 获取当前日期
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      # 构建并推送Build-Docker镜像
      - name: 构建并推送 Build-Docker 镜像
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./Build-Docker
          push: true
          tags: |
            xuewuerduo/svnadmin2:latest
            xuewuerduo/svnadmin2:${{ steps.get_remote_release.outputs.latest_release_tag }}
            xuewuerduo/svnadmin2:${{ steps.date.outputs.date }}
      #      ghcr.io/${{ github.repository_owner }}/svnadmin2:latest
      #      ghcr.io/${{ github.repository_owner }}/svnadmin2:${{ steps.get_remote_release.outputs.latest_release_tag }}
      #      ghcr.io/${{ github.repository_owner }}/svnadmin2:${{ steps.date.outputs.date }}

      # 构建并推送Build-Docker-kotel镜像
      - name: 构建并推送 Build-Docker-kotel 镜像
        if: steps.get_remote_release.outputs.skip == 'false' && steps.check_local_release.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ./Build-Docker-kotel
          push: true
          tags: |
            xuewuerduo/svnadmin2-kotel:latest
            xuewuerduo/svnadmin2-kotel:${{ steps.get_remote_release.outputs.latest_release_tag }}
            xuewuerduo/svnadmin2-kotel:${{ steps.date.outputs.date }}
      #      ghcr.io/${{ github.repository_owner }}/svnadmin2-kotel:latest
      #      ghcr.io/${{ github.repository_owner }}/svnadmin2-kotel:${{ steps.get_remote_release.outputs.latest_release_tag }}
      #       ghcr.io/${{ github.repository_owner }}/svnadmin2-kotel:${{ steps.date.outputs.date }}
